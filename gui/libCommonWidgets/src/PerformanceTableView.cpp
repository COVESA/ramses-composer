/*
 * SPDX-License-Identifier: MPL-2.0
 *
 * This file is part of Ramses Composer
 * (see https://github.com/bmwcarit/ramses-composer).
 *
 * This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
 * If a copy of the MPL was not distributed with this file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */

#include "common_widgets/PerformanceTableView.h"

#include "common_widgets/NoContentMarginsLayout.h"
#include "common_widgets/PerformanceModel.h"

#include "style/Icons.h"

#include <QHBoxLayout>
#include <QHeaderView>
#include <QPushButton>
#include <QSortFilterProxyModel>
#include <QTableView>
#include <QVBoxLayout>

namespace raco::common_widgets {

PerformanceTableView::PerformanceTableView(application::RaCoApplication* application, components::SDataChangeDispatcher dispatcher, QWidget* parent)
	: QWidget(parent), application_(application), dispatcher_(dispatcher) {
	auto mainLayout{new NoContentMarginsLayout<QVBoxLayout>(this)};

	const auto tableModel = new PerformanceModel{application_, this};

	const auto sortModel = new QSortFilterProxyModel(this);
	sortModel->setSourceModel(tableModel);

	const auto tableView = new QTableView(this);

	tableView->setModel(sortModel);
	tableView->setSelectionMode(QAbstractItemView::NoSelection);
	tableView->setContextMenuPolicy(Qt::NoContextMenu);
	tableView->setDragDropMode(QAbstractItemView::NoDragDrop);
	tableView->setEditTriggers(QAbstractItemView::NoEditTriggers);
	tableView->setSortingEnabled(true);
	tableView->setAlternatingRowColors(true);
	tableView->horizontalHeader()->setStretchLastSection(true);
	tableView->verticalHeader()->setVisible(false);
	tableView->verticalHeader()->setMinimumSectionSize(ROW_HEIGHT);
	tableView->verticalHeader()->setMaximumSectionSize(ROW_HEIGHT);
	tableView->verticalHeader()->setDefaultSectionSize(ROW_HEIGHT);

	// Note: we have to used the pressed instead of the clicked or doubleClicked events here to avoid
	// interference from the rendering timer: clicked events only seem to be generated by the button up
	// event. However if the model is reset between the button down and buttont up events no clicked event
	// will be generated. This happens when recording statistics is active since the model is then reset every frame.
	connect(tableView, &QTableView::pressed, [this, tableModel, sortModel](const auto& selectedIndex) {
		auto modelIndex = sortModel->mapToSource(selectedIndex);
		Q_EMIT objectSelectionRequested(QString::fromStdString(tableModel->objectID(modelIndex)));
	});

	const auto toolbarWidget = new QWidget();
	const auto toolbarLayout = new NoContentMarginsLayout<QHBoxLayout>(toolbarWidget);
	toolbarLayout->setContentsMargins(2, 3, 2, 0);

	const auto recordButton = new QPushButton(this);
	recordButton->setCheckable(true);
	recordButton->setIcon(style::Icons::instance().recordInactive);
	recordButton->setToolTip("Record/Stop");
	connect(recordButton, &QPushButton::toggled, this, [this, recordButton](bool checked) {
		application_->setRecordingStats(checked);
		recordButton->setIcon(checked ? style::Icons::instance().recordActive : style::Icons::instance().recordInactive);
	});
	toolbarLayout->addWidget(recordButton);

	const auto resetButton = new QPushButton(this);
	resetButton->setIcon(style::Icons::instance().remove);
	resetButton->setToolTip("Reset");
	connect(resetButton, &QPushButton::clicked, this, [this]() {
		application_->resetStats();
	});
	toolbarLayout->addWidget(resetButton);

	toolbarLayout->addStretch();

	mainLayout->addWidget(toolbarWidget);
	mainLayout->addWidget(tableView);
}

}  // namespace raco::common_widgets